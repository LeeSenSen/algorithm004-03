/**
 * @author Leesen
 * @date 2019/12/8 23:10
 */
public class LeetCode_8_338 {
    public int myAtoi(String str) {
        int len = str.length();
        int num = 0;
        for (int i=len-1; i>=0; i--) {
            num += (str.charAt(i) - '0') * Math.pow(10, l/**
 * @author Leesen/**
 * @author Leesen
 * @date 2019/12/8 23:08
 */
public class LeetCode_72_338 {
    public static int minDistance(String word1, String word2) {
        int[][] dp = new int[word1.length()+1][word2.length()+1];
        //****自底向上, 初始化条件要联想那个表格, 代表空字符与字符串的编辑距离。 各种等号容易遗漏
        for (int i=1; i<word1.length(); i++) {
            dp[i][0] = dp[i-1][0] + 1; //空字符串替换成单词需要操作数
        }
        for (int j=1; j<word2.length(); j++) {
            dp[0][j] = dp[0][j-1] + 1;
        }

        for (int j=1; j<word2.length(); j++) {
            dp[0][j] = word1.charAt(0) == word2.charAt(j) ? 0 : 1;
        }
        for (int i=1; i<=word1.length(); i++) {
            for (int j=1; j<=word2.length(); j++) {
                if (word1.charAt(i-1) == word2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = Math.min(Math.min(
                            dp[i-1][j-1],
                            dp[i-1][j]),
                            dp[i][j-1]) + 1;
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}

 * @date 2019/12/8 23:10
 */
public class LeetCode_14_338 {
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) {
            return "";
        }
        for (int i=0; i<strs[0].length(); i++) {  //以第一个字符串做对比基准
            for (int j=1; j<strs.length; j++) {  //循环后面每个字符串的每个字符跟基准比较
                if (strs[j].length() == i || strs[j].charAt(i) != strs[0].charAt(i)) {
                    return strs[0].substring(0, i);
                }
            }
        }
        return strs[0];
    }
}
en-i-1);  //ascii码相减后0就是0
            str = str.substring(0, i);
        }
        return num;
    }
}
